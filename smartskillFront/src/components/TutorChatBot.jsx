// File: smartskillFront/src/components/TutorChatBot.jsx (FINAL, COMPLETE CODE with OpenRouter FIX)

import React, { useState, useRef, useEffect } from 'react';
import './TutorChatBot.css'; 

// ðŸ’¬ Simple Chat Icon 
const ChatIcon = () => (
Â  Â  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
Â  Â  Â  Â  <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
Â  Â  </svg>
);

const TutorChatBot = () => {
Â  Â  const [isOpen, setIsOpen] = useState(false);
Â  Â  const [messages, setMessages] = useState([]);
Â  Â  const [input, setInput] = useState('');
Â  Â  const [isLoading, setIsLoading] = useState(false);

Â  Â  const messagesEndRef = useRef(null);

Â  Â  // Scroll to the bottom of the chat window on new message
Â  Â  const scrollToBottom = () => {
Â  Â  Â  Â  messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
Â  Â  };

Â  Â  useEffect(scrollToBottom, [messages]);

Â  Â  const handleSend = async (e) => {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  if (!input.trim() || isLoading) return;

Â  Â  Â  Â  const userQuery = input.trim();
Â  Â  Â  Â  const userMessage = { sender: 'user', text: userQuery };

Â  Â  Â  Â  // ðŸ“¢ UPDATED: Build the message history structure for the OpenRouter/OpenAI API
Â  Â  Â  Â  const historyPayload = messages
Â  Â  Â  Â  Â  Â  .filter(msg => msg.level !== 'Welcome') // Filter out the initial welcome message
Â  Â  Â  Â  Â  Â  .map(msg => ({
Â  Â  Â  Â  Â  Â  Â  Â  // âœ… FIX: Map 'tutor' sender to 'assistant' role for OpenAI/OpenRouter compatibility
Â  Â  Â  Â  Â  Â  Â  Â  role: msg.sender === 'user' ? 'user' : 'assistant', 
Â  Â  Â  Â  Â  Â  Â  Â  parts: [{ text: msg.text }]
Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  
Â  Â  Â  Â  // Add the current user query to the history payload
Â  Â  Â  Â  historyPayload.push({ role: 'user', parts: [{ text: userQuery }] });


Â  Â  Â  Â  // Add user message to state and clear input (UI update)
Â  Â  Â  Â  setMessages(prev => [...prev, userMessage]);
Â  Â  Â  Â  setInput('');
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  
Â  Â  Â  Â  // Add a temporary 'thinking' message
Â  Â  Â  Â  const thinkingMessage = { sender: 'tutor', text: 'Tutor is typing...' };
Â  Â  Â  Â  setMessages(prev => [...prev, thinkingMessage]);

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch('http://localhost:5000/chat/tutor', { 
Â  Â  Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  Â  Â  Â  Â  // Send the full history
Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify({ userQuery, history: historyPayload }), 
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  // IMPROVED: Handle non-200 responses specifically
Â  Â  Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  Â  Â  Â  Â  // Remove the 'thinking' message
Â  Â  Â  Â  Â  Â  Â  Â  setMessages(prev => prev.slice(0, -1)); 

Â  Â  Â  Â  Â  Â  Â  Â  const errorMessage = { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: 'tutor', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  text: `API Error: ${response.status} - ${errorData.message || 'Server failed to respond.'}` 
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  setMessages(prev => [...prev, errorMessage]);
Â  Â  Â  Â  Â  Â  Â  Â  return; // Stop execution
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Remove the 'thinking' message before adding the real response
Â  Â  Â  Â  Â  Â  setMessages(prev => prev.slice(0, -1)); 

Â  Â  Â  Â  Â  Â  if (data.success) {
Â  Â  Â  Â  Â  Â  Â  Â  const tutorMessage = { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: 'tutor', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  text: data.tutorResponse,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  level: data.predictedLevel 
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  setMessages(prev => [...prev, tutorMessage]);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  const errorMessage = { sender: 'tutor', text: 'Error: Could not get a response from the tutor.' };
Â  Â  Â  Â  Â  Â  Â  Â  setMessages(prev => [...prev, errorMessage]);
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Chatbot API error:', error);
Â  Â  Â  Â  Â  Â  setMessages(prev => prev.slice(0, -1)); // Remove thinking message
Â  Â  Â  Â  Â  Â  const errorMessage = { sender: 'tutor', text: 'Network Error: Cannot reach the server.' };
Â  Â  Â  Â  Â  Â  setMessages(prev => [...prev, errorMessage]);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const initialWelcomeMessage = { 
Â  Â  Â  Â  sender: 'tutor', 
Â  Â  Â  Â  text: "ðŸ‘‹ Hello! I'm your SmartSkill Tutor. Ask me any Python question and I'll give you a detailed answer and a difficulty assessment.",
Â  Â  Â  Â  level: 'Welcome'
Â  Â  };
Â  Â  
Â  Â  // Set initial message only once when opening
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (isOpen && messages.length === 0) {
Â  Â  Â  Â  Â  Â  setMessages([initialWelcomeMessage]);
Â  Â  Â  Â  }
Â  Â  }, [isOpen]);


Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  {/* The Floating Button */}
Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  className={`floating-chat-button ${isOpen ? 'is-open' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setIsOpen(!isOpen)}
Â  Â  Â  Â  Â  Â  Â  Â  aria-label={isOpen ? "Close Chat" : "Open Chat"}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <ChatIcon />
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  {/* The Chat Window */}
Â  Â  Â  Â  Â  Â  {isOpen && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="chat-window-container">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="chat-header">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="chat-title">SmartSkill Tutor</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="close-button" onClick={() => setIsOpen(false)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &times;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="chat-messages">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {messages.map((msg, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={index} className={`message ${msg.sender}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="message-bubble">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {msg.sender === 'tutor' && msg.level && msg.level !== 'Welcome' && msg.level !== 'Unknown' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="difficulty-tag">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Difficulty: <strong>{msg.level}</strong>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Using dangerouslySetInnerHTML for potential line breaks/markdown from Gemini */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p dangerouslySetInnerHTML={{ __html: msg.text.replace(/\n/g, '<br/>') }} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div ref={messagesEndRef} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <form className="chat-input-form" onSubmit={handleSend}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={input}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setInput(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder={isLoading ? "Please wait..." : "Ask your Python question..."}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button type="submit" disabled={isLoading}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? '...' : 'Send'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </>
Â  Â  );
};

export default TutorChatBot;
